// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MvcPracownik.Data;

#nullable disable

namespace skoki.Migrations
{
    [DbContext(typeof(MvcPracownikContext))]
    partial class MvcPracownikContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("Skoki.Models.Konkurs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Data")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Pora")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Rodzaj")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SkoczniaId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SkoczniaId");

                    b.ToTable("Konkurs");
                });

            modelBuilder.Entity("Skoki.Models.Skocznia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Kraj")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Miejscowosc")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Skocznia");
                });

            modelBuilder.Entity("Skoki.Models.Wynik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Miejsce")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Nota")
                        .HasColumnType("TEXT");

                    b.Property<int>("PunktySezonowe")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Seria1")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Seria2")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Wynik");
                });

            modelBuilder.Entity("Skoki.Models.Zawodnik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Kraj")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Zawodnik");
                });

            modelBuilder.Entity("Skoki.Models.Konkurs", b =>
                {
                    b.HasOne("Skoki.Models.Skocznia", "Skocznia")
                        .WithMany()
                        .HasForeignKey("SkoczniaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skocznia");
                });
#pragma warning restore 612, 618
        }
    }
}
